-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imageproc is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_WREADY : IN STD_LOGIC;
    m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RVALID : IN STD_LOGIC;
    m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_RLAST : IN STD_LOGIC;
    m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BVALID : IN STD_LOGIC;
    m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of imageproc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "imageproc,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=132,HLS_SYN_DSP=3,HLS_SYN_FF=2054,HLS_SYN_LUT=2930}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1D4C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011101010011000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv17_12C : STD_LOGIC_VECTOR (16 downto 0) := "00000000100101100";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_130 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100110000";
    constant ap_const_lv9_194 : STD_LOGIC_VECTOR (8 downto 0) := "110010100";
    constant ap_const_lv9_130 : STD_LOGIC_VECTOR (8 downto 0) := "100110000";
    constant ap_const_lv9_193 : STD_LOGIC_VECTOR (8 downto 0) := "110010011";
    constant ap_const_lv9_192 : STD_LOGIC_VECTOR (8 downto 0) := "110010010";
    constant ap_const_lv9_12F : STD_LOGIC_VECTOR (8 downto 0) := "100101111";
    constant ap_const_lv9_12E : STD_LOGIC_VECTOR (8 downto 0) := "100101110";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv18_12C : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv18_130 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100110000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_in : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out : STD_LOGIC_VECTOR (31 downto 0);
    signal arr1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal arr1_ce0 : STD_LOGIC;
    signal arr1_we0 : STD_LOGIC;
    signal arr1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arr1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zpadded_img4_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal zpadded_img4_ce0 : STD_LOGIC;
    signal zpadded_img4_we0 : STD_LOGIC;
    signal zpadded_img4_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zpadded_img4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel1_ce0 : STD_LOGIC;
    signal kernel1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal INPUT_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal INPUT_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal OUTPUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond3_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal OUTPUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal INPUT_r_AWREADY : STD_LOGIC;
    signal INPUT_r_WREADY : STD_LOGIC;
    signal INPUT_r_ARVALID : STD_LOGIC;
    signal INPUT_r_ARREADY : STD_LOGIC;
    signal INPUT_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RVALID : STD_LOGIC;
    signal INPUT_r_RREADY : STD_LOGIC;
    signal INPUT_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RLAST : STD_LOGIC;
    signal INPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BVALID : STD_LOGIC;
    signal INPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_AWVALID : STD_LOGIC;
    signal OUTPUT_r_AWREADY : STD_LOGIC;
    signal OUTPUT_r_WVALID : STD_LOGIC;
    signal OUTPUT_r_WREADY : STD_LOGIC;
    signal OUTPUT_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_ARREADY : STD_LOGIC;
    signal OUTPUT_r_RVALID : STD_LOGIC;
    signal OUTPUT_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_RLAST : STD_LOGIC;
    signal OUTPUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BVALID : STD_LOGIC;
    signal OUTPUT_r_BREADY : STD_LOGIC;
    signal OUTPUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_addr_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_500_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_cast_reg_1059 : STD_LOGIC_VECTOR (30 downto 0);
    signal next_mul_fu_504_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul_reg_1064 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_1072 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_2_fu_522_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal k_2_reg_1077 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond7_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_534_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1085 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal image_in2_sum_fu_544_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal image_in2_sum_reg_1090 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond6_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_553_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_reg_1095 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_559_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_reg_1100 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_ioackin_INPUT_r_ARREADY : STD_LOGIC;
    signal tmp_1_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1111 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul6_fu_583_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul6_reg_1116 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_2_fu_599_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_1124 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1031_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_reg_1129 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond5_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_615_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_1137 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_16_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1146 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_729_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_reg_1155 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_cast_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_cast_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_OUTPUT_r_AWREADY : STD_LOGIC;
    signal ap_block_state16_io : BOOLEAN;
    signal tmp_13_cast_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_784_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_reg_1173 : STD_LOGIC_VECTOR (17 downto 0);
    signal b_fu_796_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_reg_1181 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal exitcond2_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_cast_fu_802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_cast_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_816_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_1_fu_827_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_37_fu_849_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_reg_1209 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1039_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_39_reg_1214 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_reg_1219 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_878_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_45_reg_1224 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_4_fu_883_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_4_reg_1229 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_1_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_36_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_1_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_reg_1252 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_fu_934_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel1_load_reg_1262 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zpadded_img4_load_reg_1267 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1045_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal next_mul8_fu_982_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul8_reg_1277 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_4_fu_994_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_1285 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_fu_1006_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_reg_1293 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr1_load_1_reg_1303 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_reg_256 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_reg_267 : STD_LOGIC_VECTOR (16 downto 0);
    signal phi_mul_reg_279 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_reg_291 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal k_1_reg_302 : STD_LOGIC_VECTOR (16 downto 0);
    signal i1_reg_312 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul5_reg_324 : STD_LOGIC_VECTOR (16 downto 0);
    signal j2_reg_336 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i3_reg_347 : STD_LOGIC_VECTOR (8 downto 0);
    signal j4_reg_359 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal m_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal a1_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_reg_436 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul7_reg_447 : STD_LOGIC_VECTOR (16 downto 0);
    signal j6_reg_459 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_ioackin_OUTPUT_r_WREADY : STD_LOGIC;
    signal exitcond1_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_cast_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_cast_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_fu_978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_1022_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal image_in2_sum_cast_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_INPUT_r_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUTPUT_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUTPUT_r_WREADY : STD_LOGIC := '0';
    signal tmp_43_fu_969_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_out3_fu_470_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_490_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_cast_fu_540_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_cast_fu_549_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_cast_fu_605_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_705_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_cast_fu_711_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_fu_715_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_29_fu_715_p2 : signal is "no";
    signal tmp_22_cast_fu_725_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_cast_fu_735_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_fu_739_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_fu_760_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_770_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_784_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_806_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_35_fu_837_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_841_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_32_fu_833_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_neg_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast_fu_875_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_46_fu_900_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_904_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_914_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_49_fu_918_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp_49_fu_918_p2 : signal is "no";
    signal tmp_44_fu_946_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_954_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_959_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_cast_fu_1012_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_31_fu_1016_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1031_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1031_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1031_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_fu_1039_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_fu_1039_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1045_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1045_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1031_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1045_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1045_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_784_p00 : STD_LOGIC_VECTOR (17 downto 0);

    component imageproc_am_addmcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component imageproc_mul_muldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component imageproc_mac_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageproc_arr1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component imageproc_zpaddedbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component imageproc_kernel1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component imageproc_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        image_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageproc_INPUT_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component imageproc_OUTPUT_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    arr1_U : component imageproc_arr1
    generic map (
        DataWidth => 8,
        AddressRange => 120000,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => arr1_address0,
        ce0 => arr1_ce0,
        we0 => arr1_we0,
        d0 => arr1_d0,
        q0 => arr1_q0);

    zpadded_img4_U : component imageproc_zpaddedbkb
    generic map (
        DataWidth => 8,
        AddressRange => 122816,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => zpadded_img4_address0,
        ce0 => zpadded_img4_ce0,
        we0 => zpadded_img4_we0,
        d0 => zpadded_img4_d0,
        q0 => zpadded_img4_q0);

    kernel1_U : component imageproc_kernel1
    generic map (
        DataWidth => 6,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => kernel1_address0,
        ce0 => kernel1_ce0,
        q0 => kernel1_q0);

    imageproc_CTRL_s_axi_U : component imageproc_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        image_in => image_in,
        image_out => image_out);

    imageproc_INPUT_r_m_axi_U : component imageproc_INPUT_r_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_r_AWVALID,
        AWREADY => m_axi_INPUT_r_AWREADY,
        AWADDR => m_axi_INPUT_r_AWADDR,
        AWID => m_axi_INPUT_r_AWID,
        AWLEN => m_axi_INPUT_r_AWLEN,
        AWSIZE => m_axi_INPUT_r_AWSIZE,
        AWBURST => m_axi_INPUT_r_AWBURST,
        AWLOCK => m_axi_INPUT_r_AWLOCK,
        AWCACHE => m_axi_INPUT_r_AWCACHE,
        AWPROT => m_axi_INPUT_r_AWPROT,
        AWQOS => m_axi_INPUT_r_AWQOS,
        AWREGION => m_axi_INPUT_r_AWREGION,
        AWUSER => m_axi_INPUT_r_AWUSER,
        WVALID => m_axi_INPUT_r_WVALID,
        WREADY => m_axi_INPUT_r_WREADY,
        WDATA => m_axi_INPUT_r_WDATA,
        WSTRB => m_axi_INPUT_r_WSTRB,
        WLAST => m_axi_INPUT_r_WLAST,
        WID => m_axi_INPUT_r_WID,
        WUSER => m_axi_INPUT_r_WUSER,
        ARVALID => m_axi_INPUT_r_ARVALID,
        ARREADY => m_axi_INPUT_r_ARREADY,
        ARADDR => m_axi_INPUT_r_ARADDR,
        ARID => m_axi_INPUT_r_ARID,
        ARLEN => m_axi_INPUT_r_ARLEN,
        ARSIZE => m_axi_INPUT_r_ARSIZE,
        ARBURST => m_axi_INPUT_r_ARBURST,
        ARLOCK => m_axi_INPUT_r_ARLOCK,
        ARCACHE => m_axi_INPUT_r_ARCACHE,
        ARPROT => m_axi_INPUT_r_ARPROT,
        ARQOS => m_axi_INPUT_r_ARQOS,
        ARREGION => m_axi_INPUT_r_ARREGION,
        ARUSER => m_axi_INPUT_r_ARUSER,
        RVALID => m_axi_INPUT_r_RVALID,
        RREADY => m_axi_INPUT_r_RREADY,
        RDATA => m_axi_INPUT_r_RDATA,
        RLAST => m_axi_INPUT_r_RLAST,
        RID => m_axi_INPUT_r_RID,
        RUSER => m_axi_INPUT_r_RUSER,
        RRESP => m_axi_INPUT_r_RRESP,
        BVALID => m_axi_INPUT_r_BVALID,
        BREADY => m_axi_INPUT_r_BREADY,
        BRESP => m_axi_INPUT_r_BRESP,
        BID => m_axi_INPUT_r_BID,
        BUSER => m_axi_INPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_r_ARVALID,
        I_ARREADY => INPUT_r_ARREADY,
        I_ARADDR => INPUT_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => INPUT_r_RVALID,
        I_RREADY => INPUT_r_RREADY,
        I_RDATA => INPUT_r_RDATA,
        I_RID => INPUT_r_RID,
        I_RUSER => INPUT_r_RUSER,
        I_RRESP => INPUT_r_RRESP,
        I_RLAST => INPUT_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => INPUT_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_r_BRESP,
        I_BID => INPUT_r_BID,
        I_BUSER => INPUT_r_BUSER);

    imageproc_OUTPUT_r_m_axi_U : component imageproc_OUTPUT_r_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUTPUT_r_AWVALID,
        AWREADY => m_axi_OUTPUT_r_AWREADY,
        AWADDR => m_axi_OUTPUT_r_AWADDR,
        AWID => m_axi_OUTPUT_r_AWID,
        AWLEN => m_axi_OUTPUT_r_AWLEN,
        AWSIZE => m_axi_OUTPUT_r_AWSIZE,
        AWBURST => m_axi_OUTPUT_r_AWBURST,
        AWLOCK => m_axi_OUTPUT_r_AWLOCK,
        AWCACHE => m_axi_OUTPUT_r_AWCACHE,
        AWPROT => m_axi_OUTPUT_r_AWPROT,
        AWQOS => m_axi_OUTPUT_r_AWQOS,
        AWREGION => m_axi_OUTPUT_r_AWREGION,
        AWUSER => m_axi_OUTPUT_r_AWUSER,
        WVALID => m_axi_OUTPUT_r_WVALID,
        WREADY => m_axi_OUTPUT_r_WREADY,
        WDATA => m_axi_OUTPUT_r_WDATA,
        WSTRB => m_axi_OUTPUT_r_WSTRB,
        WLAST => m_axi_OUTPUT_r_WLAST,
        WID => m_axi_OUTPUT_r_WID,
        WUSER => m_axi_OUTPUT_r_WUSER,
        ARVALID => m_axi_OUTPUT_r_ARVALID,
        ARREADY => m_axi_OUTPUT_r_ARREADY,
        ARADDR => m_axi_OUTPUT_r_ARADDR,
        ARID => m_axi_OUTPUT_r_ARID,
        ARLEN => m_axi_OUTPUT_r_ARLEN,
        ARSIZE => m_axi_OUTPUT_r_ARSIZE,
        ARBURST => m_axi_OUTPUT_r_ARBURST,
        ARLOCK => m_axi_OUTPUT_r_ARLOCK,
        ARCACHE => m_axi_OUTPUT_r_ARCACHE,
        ARPROT => m_axi_OUTPUT_r_ARPROT,
        ARQOS => m_axi_OUTPUT_r_ARQOS,
        ARREGION => m_axi_OUTPUT_r_ARREGION,
        ARUSER => m_axi_OUTPUT_r_ARUSER,
        RVALID => m_axi_OUTPUT_r_RVALID,
        RREADY => m_axi_OUTPUT_r_RREADY,
        RDATA => m_axi_OUTPUT_r_RDATA,
        RLAST => m_axi_OUTPUT_r_RLAST,
        RID => m_axi_OUTPUT_r_RID,
        RUSER => m_axi_OUTPUT_r_RUSER,
        RRESP => m_axi_OUTPUT_r_RRESP,
        BVALID => m_axi_OUTPUT_r_BVALID,
        BREADY => m_axi_OUTPUT_r_BREADY,
        BRESP => m_axi_OUTPUT_r_BRESP,
        BID => m_axi_OUTPUT_r_BID,
        BUSER => m_axi_OUTPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUTPUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_r_RDATA,
        I_RID => OUTPUT_r_RID,
        I_RUSER => OUTPUT_r_RUSER,
        I_RRESP => OUTPUT_r_RRESP,
        I_RLAST => OUTPUT_r_RLAST,
        I_AWVALID => OUTPUT_r_AWVALID,
        I_AWREADY => OUTPUT_r_AWREADY,
        I_AWADDR => OUTPUT_addr_reg_1053,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1D4C0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUTPUT_r_WVALID,
        I_WREADY => OUTPUT_r_WREADY,
        I_WDATA => OUTPUT_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => OUTPUT_r_BVALID,
        I_BREADY => OUTPUT_r_BREADY,
        I_BRESP => OUTPUT_r_BRESP,
        I_BID => OUTPUT_r_BID,
        I_BUSER => OUTPUT_r_BUSER);

    imageproc_am_addmcud_U1 : component imageproc_am_addmcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_1031_p0,
        din1 => grp_fu_1031_p1,
        din2 => grp_fu_1031_p2,
        dout => grp_fu_1031_p3);

    imageproc_mul_muldEe_U2 : component imageproc_mul_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => tmp_39_fu_1039_p0,
        din1 => tmp_39_fu_1039_p1,
        dout => tmp_39_fu_1039_p2);

    imageproc_mac_muleOg_U3 : component imageproc_mac_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1045_p0,
        din1 => grp_fu_1045_p1,
        din2 => tmp_3_reg_424,
        dout => grp_fu_1045_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_INPUT_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_INPUT_r_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = INPUT_r_ARREADY)) then 
                        ap_reg_ioackin_INPUT_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_0;
            else
                if (((exitcond3_fu_754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    if ((ap_const_boolean_0 = ap_block_state16_io)) then 
                        ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = OUTPUT_r_AWREADY)) then 
                        ap_reg_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUTPUT_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                    if ((ap_sig_ioackin_OUTPUT_r_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = OUTPUT_r_WREADY)) then 
                        ap_reg_ioackin_OUTPUT_r_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    a1_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_36_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                a1_reg_382 <= a_1_fu_934_p2;
            elsif (((exitcond2_fu_790_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                a1_reg_382 <= a_cast_reg_1163;
            end if; 
        end if;
    end process;

    b1_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                b1_reg_415 <= b_1_reg_1252;
            elsif (((tmp_26_fu_822_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                b1_reg_415 <= b_cast_reg_1186;
            end if; 
        end if;
    end process;

    i1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_312 <= ap_const_lv9_0;
            elsif (((exitcond4_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i1_reg_312 <= i_2_reg_1124;
            end if; 
        end if;
    end process;

    i3_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_593_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i3_reg_347 <= ap_const_lv9_2;
            elsif (((exitcond2_fu_790_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i3_reg_347 <= i_3_fu_816_p2;
            end if; 
        end if;
    end process;

    i5_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1000_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i5_reg_436 <= i_4_reg_1285;
            elsif (((ap_const_boolean_0 = ap_block_state16_io) and (exitcond3_fu_754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i5_reg_436 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_256 <= i_1_reg_1072;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_256 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j2_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j2_reg_336 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j2_reg_336 <= j_2_reg_1137;
            end if; 
        end if;
    end process;

    j4_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state16_io) and (exitcond3_fu_754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                j4_reg_359 <= ap_const_lv9_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                j4_reg_359 <= j_4_reg_1229;
            end if; 
        end if;
    end process;

    j6_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_988_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                j6_reg_459 <= ap_const_lv9_0;
            elsif (((ap_sig_ioackin_OUTPUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                j6_reg_459 <= j_3_reg_1293;
            end if; 
        end if;
    end process;

    j_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_reg_291 <= j_1_reg_1085;
            elsif (((exitcond7_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_291 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    k_1_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_1_reg_302 <= tmp_5_reg_1100;
            elsif (((exitcond7_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_1_reg_302 <= k_reg_267;
            end if; 
        end if;
    end process;

    k_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_267 <= k_2_reg_1077;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_267 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    m_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_36_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                m_reg_371 <= m_1_reg_1204;
            elsif (((exitcond2_fu_790_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                m_reg_371 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    n_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                n_reg_404 <= n_1_reg_1237;
            elsif (((tmp_26_fu_822_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                n_reg_404 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul5_reg_324 <= ap_const_lv17_0;
            elsif (((exitcond4_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                phi_mul5_reg_324 <= next_mul6_reg_1116;
            end if; 
        end if;
    end process;

    phi_mul7_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1000_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                phi_mul7_reg_447 <= next_mul8_reg_1277;
            elsif (((ap_const_boolean_0 = ap_block_state16_io) and (exitcond3_fu_754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                phi_mul7_reg_447 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_279 <= next_mul_reg_1064;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_279 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    tmp_2_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_36_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                tmp_2_reg_392 <= tmp_3_reg_424;
            elsif (((exitcond2_fu_790_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                tmp_2_reg_392 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_3_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                tmp_3_reg_424 <= grp_fu_1045_p3;
            elsif (((tmp_26_fu_822_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                tmp_3_reg_424 <= tmp_2_reg_392;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    OUTPUT_addr_reg_1053(29 downto 0) <= tmp_6_fu_480_p1(32 - 1 downto 0)(29 downto 0);
                    tmp_10_cast_reg_1059(29 downto 0) <= tmp_10_cast_fu_500_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state16_io) and (exitcond3_fu_754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    a_cast_reg_1163(8 downto 0) <= a_cast_fu_766_p1(8 downto 0);
                    tmp_13_cast_reg_1168(8 downto 0) <= tmp_13_cast_fu_776_p1(8 downto 0);
                    tmp_9_reg_1173(17 downto 2) <= tmp_9_fu_784_p2(17 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                arr1_load_1_reg_1303 <= arr1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_36_fu_889_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                b_1_reg_1252 <= b_1_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_790_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    b_cast_reg_1186(8 downto 0) <= b_cast_fu_802_p1(8 downto 0);
                b_reg_1181 <= b_fu_796_p2;
                    tmp_25_cast_reg_1191(8 downto 0) <= tmp_25_cast_fu_812_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_1072 <= i_1_fu_516_p2;
                next_mul_reg_1064 <= next_mul_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_2_reg_1124 <= i_2_fu_599_p2;
                next_mul6_reg_1116 <= next_mul6_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                i_4_reg_1285 <= i_4_fu_994_p2;
                next_mul8_reg_1277 <= next_mul8_fu_982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                image_in2_sum_reg_1090 <= image_in2_sum_fu_544_p2;
                tmp_4_reg_1095 <= tmp_4_fu_553_p2;
                tmp_5_reg_1100 <= tmp_5_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_1085 <= j_1_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_2_reg_1137 <= j_2_fu_615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                j_3_reg_1293 <= j_3_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_26_fu_822_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                j_4_reg_1229 <= j_4_fu_883_p2;
                tmp_33_reg_1219 <= p_neg_fu_859_p2(15 downto 8);
                tmp_45_reg_1224 <= tmp_45_fu_878_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                k_2_reg_1077 <= k_2_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                kernel1_load_reg_1262 <= kernel1_q0;
                zpadded_img4_load_reg_1267 <= zpadded_img4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                m_1_reg_1204 <= m_1_fu_827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                n_1_reg_1237 <= n_1_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_609_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_16_reg_1142 <= tmp_16_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = INPUT_r_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_1_reg_1111 <= tmp_1_fu_575_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_609_p2 = ap_const_lv1_0) and (tmp_16_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_27_reg_1146 <= tmp_27_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_27_fu_699_p2 = ap_const_lv1_0) and (exitcond4_fu_609_p2 = ap_const_lv1_0) and (tmp_16_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_30_reg_1155 <= tmp_30_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_26_fu_822_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                tmp_37_reg_1209 <= tmp_37_fu_849_p2;
                tmp_39_reg_1214 <= tmp_39_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_s_reg_1129 <= grp_fu_1031_p3;
            end if;
        end if;
    end process;
    OUTPUT_addr_reg_1053(31 downto 30) <= "00";
    tmp_10_cast_reg_1059(30) <= '0';
    a_cast_reg_1163(31 downto 9) <= "00000000000000000000000";
    tmp_13_cast_reg_1168(31 downto 9) <= "00000000000000000000000";
    tmp_9_reg_1173(1 downto 0) <= "00";
    b_cast_reg_1186(31 downto 9) <= "00000000000000000000000";
    tmp_25_cast_reg_1191(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state16, exitcond3_fu_754_p2, ap_CS_fsm_state26, ap_CS_fsm_state30, INPUT_r_RVALID, OUTPUT_r_BVALID, ap_CS_fsm_state2, exitcond7_fu_510_p2, ap_CS_fsm_state3, exitcond6_fu_528_p2, ap_sig_ioackin_INPUT_r_ARREADY, ap_CS_fsm_state13, exitcond5_fu_593_p2, ap_CS_fsm_state14, exitcond4_fu_609_p2, ap_block_state16_io, ap_CS_fsm_state17, exitcond2_fu_790_p2, ap_CS_fsm_state18, tmp_26_fu_822_p2, ap_CS_fsm_state19, tmp_36_fu_889_p2, ap_CS_fsm_state23, ap_CS_fsm_state24, exitcond_fu_1000_p2, ap_sig_ioackin_OUTPUT_r_WREADY, exitcond1_fu_988_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond6_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_INPUT_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = INPUT_r_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state13 => 
                if (((exitcond5_fu_593_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((exitcond4_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_boolean_0 = ap_block_state16_io) and (exitcond3_fu_754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((ap_const_boolean_0 = ap_block_state16_io) and (exitcond3_fu_754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((exitcond2_fu_790_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((tmp_26_fu_822_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state19 => 
                if (((tmp_36_fu_889_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state23 => 
                if (((exitcond1_fu_988_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state24 => 
                if (((exitcond_fu_1000_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_sig_ioackin_OUTPUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    INPUT_r_ARADDR <= image_in2_sum_cast_fu_565_p1(32 - 1 downto 0);

    INPUT_r_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if (((ap_reg_ioackin_INPUT_r_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            INPUT_r_ARVALID <= ap_const_logic_1;
        else 
            INPUT_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_RREADY_assign_proc : process(ap_CS_fsm_state11, INPUT_r_RVALID)
    begin
        if (((ap_const_logic_1 = INPUT_r_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            INPUT_r_RREADY <= ap_const_logic_1;
        else 
            INPUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_blk_n_AR_assign_proc : process(m_axi_INPUT_r_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            INPUT_r_blk_n_AR <= m_axi_INPUT_r_ARREADY;
        else 
            INPUT_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_r_blk_n_R_assign_proc : process(m_axi_INPUT_r_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            INPUT_r_blk_n_R <= m_axi_INPUT_r_RVALID;
        else 
            INPUT_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state16, exitcond3_fu_754_p2, ap_reg_ioackin_OUTPUT_r_AWREADY)
    begin
        if (((ap_reg_ioackin_OUTPUT_r_AWREADY = ap_const_logic_0) and (exitcond3_fu_754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            OUTPUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_BREADY_assign_proc : process(ap_CS_fsm_state30, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            OUTPUT_r_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_r_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arr1_load_1_reg_1303),32));

    OUTPUT_r_WVALID_assign_proc : process(ap_CS_fsm_state26, ap_reg_ioackin_OUTPUT_r_WREADY)
    begin
        if (((ap_reg_ioackin_OUTPUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            OUTPUT_r_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_blk_n_AW_assign_proc : process(m_axi_OUTPUT_r_AWREADY, ap_CS_fsm_state16, exitcond3_fu_754_p2)
    begin
        if (((exitcond3_fu_754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            OUTPUT_r_blk_n_AW <= m_axi_OUTPUT_r_AWREADY;
        else 
            OUTPUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_B_assign_proc : process(m_axi_OUTPUT_r_BVALID, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            OUTPUT_r_blk_n_B <= m_axi_OUTPUT_r_BVALID;
        else 
            OUTPUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_W_assign_proc : process(m_axi_OUTPUT_r_WREADY, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            OUTPUT_r_blk_n_W <= m_axi_OUTPUT_r_WREADY;
        else 
            OUTPUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    a_1_fu_934_p2 <= std_logic_vector(unsigned(a1_reg_382) + unsigned(ap_const_lv32_1));
    a_cast_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_760_p2),32));
    a_fu_760_p2 <= std_logic_vector(unsigned(i3_reg_347) + unsigned(ap_const_lv9_1FE));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state16_io_assign_proc : process(exitcond3_fu_754_p2, ap_sig_ioackin_OUTPUT_r_AWREADY)
    begin
                ap_block_state16_io <= ((ap_sig_ioackin_OUTPUT_r_AWREADY = ap_const_logic_0) and (exitcond3_fu_754_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state30, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, OUTPUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_INPUT_r_ARREADY_assign_proc : process(INPUT_r_ARREADY, ap_reg_ioackin_INPUT_r_ARREADY)
    begin
        if ((ap_reg_ioackin_INPUT_r_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_INPUT_r_ARREADY <= INPUT_r_ARREADY;
        else 
            ap_sig_ioackin_INPUT_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_r_AWREADY_assign_proc : process(OUTPUT_r_AWREADY, ap_reg_ioackin_OUTPUT_r_AWREADY)
    begin
        if ((ap_reg_ioackin_OUTPUT_r_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUTPUT_r_AWREADY <= OUTPUT_r_AWREADY;
        else 
            ap_sig_ioackin_OUTPUT_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUTPUT_r_WREADY_assign_proc : process(OUTPUT_r_WREADY, ap_reg_ioackin_OUTPUT_r_WREADY)
    begin
        if ((ap_reg_ioackin_OUTPUT_r_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUTPUT_r_WREADY <= OUTPUT_r_WREADY;
        else 
            ap_sig_ioackin_OUTPUT_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    arr1_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state12, ap_CS_fsm_state22, tmp_19_cast_fu_579_p1, tmp_45_cast_fu_720_p1, tmp_51_cast_fu_978_p1, tmp_47_cast_fu_1022_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            arr1_address0 <= tmp_47_cast_fu_1022_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            arr1_address0 <= tmp_51_cast_fu_978_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            arr1_address0 <= tmp_45_cast_fu_720_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            arr1_address0 <= tmp_19_cast_fu_579_p1(17 - 1 downto 0);
        else 
            arr1_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    arr1_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            arr1_ce0 <= ap_const_logic_1;
        else 
            arr1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr1_d0_assign_proc : process(tmp_1_reg_1111, ap_CS_fsm_state12, ap_CS_fsm_state22, tmp_43_fu_969_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            arr1_d0 <= tmp_43_fu_969_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            arr1_d0 <= tmp_1_reg_1111;
        else 
            arr1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    arr1_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            arr1_we0 <= ap_const_logic_1;
        else 
            arr1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_fu_928_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(b1_reg_415));
    b_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_fu_796_p2),32));
    b_fu_796_p2 <= std_logic_vector(unsigned(j4_reg_359) + unsigned(ap_const_lv9_1FE));
    exitcond1_fu_988_p2 <= "1" when (i5_reg_436 = ap_const_lv9_190) else "0";
    exitcond2_fu_790_p2 <= "1" when (j4_reg_359 = ap_const_lv9_12E) else "0";
    exitcond3_fu_754_p2 <= "1" when (i3_reg_347 = ap_const_lv9_192) else "0";
    exitcond4_fu_609_p2 <= "1" when (j2_reg_336 = ap_const_lv9_130) else "0";
    exitcond5_fu_593_p2 <= "1" when (i1_reg_312 = ap_const_lv9_194) else "0";
    exitcond6_fu_528_p2 <= "1" when (j_reg_291 = ap_const_lv9_12C) else "0";
    exitcond7_fu_510_p2 <= "1" when (i_reg_256 = ap_const_lv9_190) else "0";
    exitcond_fu_1000_p2 <= "1" when (j6_reg_459 = ap_const_lv9_12C) else "0";
    grp_fu_1031_p0 <= grp_fu_1031_p00(9 - 1 downto 0);
    grp_fu_1031_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_312),10));
    grp_fu_1031_p1 <= ap_const_lv10_3FE(2 - 1 downto 0);
    grp_fu_1031_p2 <= ap_const_lv18_12C(10 - 1 downto 0);
    grp_fu_1045_p0 <= grp_fu_1045_p00(6 - 1 downto 0);
    grp_fu_1045_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel1_load_reg_1262),16));
    grp_fu_1045_p1 <= grp_fu_1045_p10(8 - 1 downto 0);
    grp_fu_1045_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zpadded_img4_load_reg_1267),16));
    i_1_fu_516_p2 <= std_logic_vector(unsigned(i_reg_256) + unsigned(ap_const_lv9_1));
    i_2_fu_599_p2 <= std_logic_vector(unsigned(i1_reg_312) + unsigned(ap_const_lv9_1));
    i_3_fu_816_p2 <= std_logic_vector(unsigned(i3_reg_347) + unsigned(ap_const_lv9_1));
    i_4_fu_994_p2 <= std_logic_vector(unsigned(i5_reg_436) + unsigned(ap_const_lv9_1));
    image_in2_sum_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in2_sum_reg_1090),64));
    image_in2_sum_fu_544_p2 <= std_logic_vector(unsigned(tmp_10_cast_reg_1059) + unsigned(tmp_cast_fu_540_p1));
    image_out3_fu_470_p4 <= image_out(31 downto 2);
    j2_cast_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_336),10));
    j_1_fu_534_p2 <= std_logic_vector(unsigned(j_reg_291) + unsigned(ap_const_lv9_1));
    j_2_fu_615_p2 <= std_logic_vector(unsigned(j2_reg_336) + unsigned(ap_const_lv9_1));
    j_3_fu_1006_p2 <= std_logic_vector(unsigned(j6_reg_459) + unsigned(ap_const_lv9_1));
    j_4_fu_883_p2 <= std_logic_vector(unsigned(j4_reg_359) + unsigned(ap_const_lv9_1));
    k_2_fu_522_p2 <= std_logic_vector(unsigned(k_reg_267) + unsigned(ap_const_lv17_12C));
    kernel1_address0 <= tmp_52_cast_fu_909_p1(5 - 1 downto 0);

    kernel1_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            kernel1_ce0 <= ap_const_logic_1;
        else 
            kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_827_p2 <= std_logic_vector(unsigned(m_reg_371) + unsigned(ap_const_lv32_1));
    n_1_fu_894_p2 <= std_logic_vector(unsigned(n_reg_404) + unsigned(ap_const_lv32_1));
    next_mul6_fu_583_p2 <= std_logic_vector(unsigned(phi_mul5_reg_324) + unsigned(ap_const_lv17_130));
    next_mul8_fu_982_p2 <= std_logic_vector(unsigned(phi_mul7_reg_447) + unsigned(ap_const_lv17_12C));
    next_mul_fu_504_p2 <= std_logic_vector(unsigned(phi_mul_reg_279) + unsigned(ap_const_lv17_12C));
    p_neg_fu_859_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_2_reg_392));
    p_shl_cast_fu_841_p3 <= (tmp_35_fu_837_p1 & ap_const_lv2_0);
    tmp_10_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_490_p4),31));
    tmp_10_fu_621_p2 <= "1" when (i1_reg_312 = ap_const_lv9_193) else "0";
    tmp_11_fu_627_p2 <= "1" when (i1_reg_312 = ap_const_lv9_192) else "0";
    tmp_12_fu_633_p2 <= (tmp_11_fu_627_p2 or tmp_10_fu_621_p2);
    tmp_13_cast_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_770_p2),32));
    tmp_13_fu_639_p2 <= "1" when (i1_reg_312 = ap_const_lv9_1) else "0";
    tmp_14_fu_645_p2 <= (tmp_13_fu_639_p2 or tmp_12_fu_633_p2);
    tmp_15_fu_651_p2 <= "1" when (i1_reg_312 = ap_const_lv9_0) else "0";
    tmp_16_cast_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_336),17));
    tmp_16_fu_657_p2 <= (tmp_15_fu_651_p2 or tmp_14_fu_645_p2);
    tmp_17_fu_663_p2 <= "1" when (j2_reg_336 = ap_const_lv9_12F) else "0";
    tmp_18_fu_669_p2 <= "1" when (j2_reg_336 = ap_const_lv9_12E) else "0";
    tmp_19_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1095),64));
    tmp_19_fu_675_p2 <= (tmp_18_fu_669_p2 or tmp_17_fu_663_p2);
    tmp_1_fu_575_p1 <= INPUT_r_RDATA(8 - 1 downto 0);
    tmp_20_fu_705_p2 <= std_logic_vector(unsigned(j2_cast_fu_605_p1) + unsigned(ap_const_lv10_3FE));
        tmp_21_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_705_p2),18));

    tmp_21_fu_681_p2 <= "1" when (j2_reg_336 = ap_const_lv9_1) else "0";
    tmp_22_cast_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_336),17));
    tmp_22_fu_687_p2 <= (tmp_21_fu_681_p2 or tmp_19_fu_675_p2);
    tmp_23_fu_693_p2 <= "1" when (j2_reg_336 = ap_const_lv9_0) else "0";
    tmp_24_cast_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_739_p2),64));
    tmp_24_fu_739_p2 <= std_logic_vector(unsigned(phi_mul5_reg_324) + unsigned(tmp_16_cast_fu_735_p1));
    tmp_25_cast_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_806_p2),32));
    tmp_25_fu_806_p2 <= std_logic_vector(unsigned(j4_reg_359) + unsigned(ap_const_lv9_3));
    tmp_26_fu_822_p2 <= "1" when (signed(a1_reg_382) < signed(tmp_13_cast_reg_1168)) else "0";
    tmp_27_cast_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_reg_459),17));
    tmp_27_fu_699_p2 <= (tmp_23_fu_693_p2 or tmp_22_fu_687_p2);
    tmp_29_fu_715_p2 <= std_logic_vector(signed(tmp_s_reg_1129) + signed(tmp_21_cast_fu_711_p1));
    tmp_30_fu_729_p2 <= std_logic_vector(unsigned(phi_mul5_reg_324) + unsigned(tmp_22_cast_fu_725_p1));
    tmp_31_fu_1016_p2 <= std_logic_vector(unsigned(phi_mul7_reg_447) + unsigned(tmp_27_cast_fu_1012_p1));
    tmp_32_fu_833_p1 <= m_reg_371(6 - 1 downto 0);
    tmp_34_fu_954_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_33_reg_1219));
    tmp_35_cast_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_1181),18));
    tmp_35_fu_837_p1 <= m_reg_371(4 - 1 downto 0);
    tmp_36_fu_889_p2 <= "1" when (signed(b1_reg_415) < signed(tmp_25_cast_reg_1191)) else "0";
    tmp_37_fu_849_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_841_p3) + unsigned(tmp_32_fu_833_p1));
    tmp_39_fu_1039_p0 <= ap_const_lv18_130(10 - 1 downto 0);
    tmp_39_fu_1039_p1 <= a1_reg_382(18 - 1 downto 0);
    tmp_42_fu_959_p4 <= tmp_2_reg_392(15 downto 8);
    tmp_43_fu_969_p3 <= 
        tmp_34_fu_954_p2 when (tmp_44_fu_946_p3(0) = '1') else 
        tmp_42_fu_959_p4;
    tmp_44_fu_946_p3 <= tmp_2_reg_392(31 downto 31);
        tmp_45_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_715_p2),64));

    tmp_45_fu_878_p2 <= std_logic_vector(unsigned(tmp_9_reg_1173) + unsigned(tmp_35_cast_fu_875_p1));
    tmp_46_cast_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_1155),64));
    tmp_46_fu_900_p1 <= n_reg_404(6 - 1 downto 0);
    tmp_47_cast_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_1016_p2),64));
    tmp_47_fu_904_p2 <= std_logic_vector(unsigned(tmp_46_fu_900_p1) + unsigned(tmp_37_reg_1209));
    tmp_48_fu_914_p1 <= b1_reg_415(18 - 1 downto 0);
    tmp_49_fu_918_p2 <= std_logic_vector(unsigned(tmp_48_fu_914_p1) + unsigned(tmp_39_reg_1214));
    tmp_4_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_291),17));
    tmp_4_fu_553_p2 <= std_logic_vector(unsigned(phi_mul_reg_279) + unsigned(tmp_4_cast_fu_549_p1));
        tmp_51_cast_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_45_reg_1224),64));

        tmp_52_cast_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_47_fu_904_p2),64));

        tmp_53_cast_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_fu_918_p2),64));

    tmp_5_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(k_1_reg_302));
    tmp_6_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_out3_fu_470_p4),64));
    tmp_7_fu_770_p2 <= std_logic_vector(unsigned(i3_reg_347) + unsigned(ap_const_lv9_3));
    tmp_9_fu_784_p0 <= tmp_9_fu_784_p00(9 - 1 downto 0);
    tmp_9_fu_784_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_760_p2),18));
    tmp_9_fu_784_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_784_p0) * unsigned(ap_const_lv18_12C), 18));
    tmp_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_302),31));
    tmp_fu_490_p4 <= image_in(31 downto 2);

    zpadded_img4_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state15, tmp_24_cast_fu_745_p1, tmp_46_cast_fu_750_p1, tmp_53_cast_fu_923_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            zpadded_img4_address0 <= tmp_53_cast_fu_923_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            zpadded_img4_address0 <= tmp_46_cast_fu_750_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            zpadded_img4_address0 <= tmp_24_cast_fu_745_p1(17 - 1 downto 0);
        else 
            zpadded_img4_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    zpadded_img4_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zpadded_img4_ce0 <= ap_const_logic_1;
        else 
            zpadded_img4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zpadded_img4_d0_assign_proc : process(arr1_q0, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            zpadded_img4_d0 <= arr1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            zpadded_img4_d0 <= ap_const_lv8_0;
        else 
            zpadded_img4_d0 <= "XXXXXXXX";
        end if; 
    end process;


    zpadded_img4_we0_assign_proc : process(ap_CS_fsm_state14, tmp_16_fu_657_p2, tmp_16_reg_1142, exitcond4_fu_609_p2, tmp_27_fu_699_p2, tmp_27_reg_1146, ap_CS_fsm_state15)
    begin
        if ((((tmp_27_reg_1146 = ap_const_lv1_0) and (tmp_16_reg_1142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (((exitcond4_fu_609_p2 = ap_const_lv1_0) and (tmp_27_fu_699_p2 = ap_const_lv1_1)) or ((exitcond4_fu_609_p2 = ap_const_lv1_0) and (tmp_16_fu_657_p2 = ap_const_lv1_1)))))) then 
            zpadded_img4_we0 <= ap_const_logic_1;
        else 
            zpadded_img4_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
