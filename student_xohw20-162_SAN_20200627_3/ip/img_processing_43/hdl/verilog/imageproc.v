// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="imageproc,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=132,HLS_SYN_DSP=3,HLS_SYN_FF=2054,HLS_SYN_LUT=2930}" *)

module imageproc (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY,
        m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY,
        m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST,
        m_axi_INPUT_r_RID,
        m_axi_INPUT_r_RUSER,
        m_axi_INPUT_r_RRESP,
        m_axi_INPUT_r_BVALID,
        m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP,
        m_axi_INPUT_r_BID,
        m_axi_INPUT_r_BUSER,
        m_axi_OUTPUT_r_AWVALID,
        m_axi_OUTPUT_r_AWREADY,
        m_axi_OUTPUT_r_AWADDR,
        m_axi_OUTPUT_r_AWID,
        m_axi_OUTPUT_r_AWLEN,
        m_axi_OUTPUT_r_AWSIZE,
        m_axi_OUTPUT_r_AWBURST,
        m_axi_OUTPUT_r_AWLOCK,
        m_axi_OUTPUT_r_AWCACHE,
        m_axi_OUTPUT_r_AWPROT,
        m_axi_OUTPUT_r_AWQOS,
        m_axi_OUTPUT_r_AWREGION,
        m_axi_OUTPUT_r_AWUSER,
        m_axi_OUTPUT_r_WVALID,
        m_axi_OUTPUT_r_WREADY,
        m_axi_OUTPUT_r_WDATA,
        m_axi_OUTPUT_r_WSTRB,
        m_axi_OUTPUT_r_WLAST,
        m_axi_OUTPUT_r_WID,
        m_axi_OUTPUT_r_WUSER,
        m_axi_OUTPUT_r_ARVALID,
        m_axi_OUTPUT_r_ARREADY,
        m_axi_OUTPUT_r_ARADDR,
        m_axi_OUTPUT_r_ARID,
        m_axi_OUTPUT_r_ARLEN,
        m_axi_OUTPUT_r_ARSIZE,
        m_axi_OUTPUT_r_ARBURST,
        m_axi_OUTPUT_r_ARLOCK,
        m_axi_OUTPUT_r_ARCACHE,
        m_axi_OUTPUT_r_ARPROT,
        m_axi_OUTPUT_r_ARQOS,
        m_axi_OUTPUT_r_ARREGION,
        m_axi_OUTPUT_r_ARUSER,
        m_axi_OUTPUT_r_RVALID,
        m_axi_OUTPUT_r_RREADY,
        m_axi_OUTPUT_r_RDATA,
        m_axi_OUTPUT_r_RLAST,
        m_axi_OUTPUT_r_RID,
        m_axi_OUTPUT_r_RUSER,
        m_axi_OUTPUT_r_RRESP,
        m_axi_OUTPUT_r_BVALID,
        m_axi_OUTPUT_r_BREADY,
        m_axi_OUTPUT_r_BRESP,
        m_axi_OUTPUT_r_BID,
        m_axi_OUTPUT_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_r_AWVALID;
input   m_axi_INPUT_r_AWREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_AWADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_AWID;
output  [7:0] m_axi_INPUT_r_AWLEN;
output  [2:0] m_axi_INPUT_r_AWSIZE;
output  [1:0] m_axi_INPUT_r_AWBURST;
output  [1:0] m_axi_INPUT_r_AWLOCK;
output  [3:0] m_axi_INPUT_r_AWCACHE;
output  [2:0] m_axi_INPUT_r_AWPROT;
output  [3:0] m_axi_INPUT_r_AWQOS;
output  [3:0] m_axi_INPUT_r_AWREGION;
output  [C_M_AXI_INPUT_R_AWUSER_WIDTH - 1:0] m_axi_INPUT_r_AWUSER;
output   m_axi_INPUT_r_WVALID;
input   m_axi_INPUT_r_WREADY;
output  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_WDATA;
output  [C_M_AXI_INPUT_R_WSTRB_WIDTH - 1:0] m_axi_INPUT_r_WSTRB;
output   m_axi_INPUT_r_WLAST;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_WID;
output  [C_M_AXI_INPUT_R_WUSER_WIDTH - 1:0] m_axi_INPUT_r_WUSER;
output   m_axi_INPUT_r_ARVALID;
input   m_axi_INPUT_r_ARREADY;
output  [C_M_AXI_INPUT_R_ADDR_WIDTH - 1:0] m_axi_INPUT_r_ARADDR;
output  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_ARID;
output  [7:0] m_axi_INPUT_r_ARLEN;
output  [2:0] m_axi_INPUT_r_ARSIZE;
output  [1:0] m_axi_INPUT_r_ARBURST;
output  [1:0] m_axi_INPUT_r_ARLOCK;
output  [3:0] m_axi_INPUT_r_ARCACHE;
output  [2:0] m_axi_INPUT_r_ARPROT;
output  [3:0] m_axi_INPUT_r_ARQOS;
output  [3:0] m_axi_INPUT_r_ARREGION;
output  [C_M_AXI_INPUT_R_ARUSER_WIDTH - 1:0] m_axi_INPUT_r_ARUSER;
input   m_axi_INPUT_r_RVALID;
output   m_axi_INPUT_r_RREADY;
input  [C_M_AXI_INPUT_R_DATA_WIDTH - 1:0] m_axi_INPUT_r_RDATA;
input   m_axi_INPUT_r_RLAST;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_RID;
input  [C_M_AXI_INPUT_R_RUSER_WIDTH - 1:0] m_axi_INPUT_r_RUSER;
input  [1:0] m_axi_INPUT_r_RRESP;
input   m_axi_INPUT_r_BVALID;
output   m_axi_INPUT_r_BREADY;
input  [1:0] m_axi_INPUT_r_BRESP;
input  [C_M_AXI_INPUT_R_ID_WIDTH - 1:0] m_axi_INPUT_r_BID;
input  [C_M_AXI_INPUT_R_BUSER_WIDTH - 1:0] m_axi_INPUT_r_BUSER;
output   m_axi_OUTPUT_r_AWVALID;
input   m_axi_OUTPUT_r_AWREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_AWADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_AWID;
output  [7:0] m_axi_OUTPUT_r_AWLEN;
output  [2:0] m_axi_OUTPUT_r_AWSIZE;
output  [1:0] m_axi_OUTPUT_r_AWBURST;
output  [1:0] m_axi_OUTPUT_r_AWLOCK;
output  [3:0] m_axi_OUTPUT_r_AWCACHE;
output  [2:0] m_axi_OUTPUT_r_AWPROT;
output  [3:0] m_axi_OUTPUT_r_AWQOS;
output  [3:0] m_axi_OUTPUT_r_AWREGION;
output  [C_M_AXI_OUTPUT_R_AWUSER_WIDTH - 1:0] m_axi_OUTPUT_r_AWUSER;
output   m_axi_OUTPUT_r_WVALID;
input   m_axi_OUTPUT_r_WREADY;
output  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_WDATA;
output  [C_M_AXI_OUTPUT_R_WSTRB_WIDTH - 1:0] m_axi_OUTPUT_r_WSTRB;
output   m_axi_OUTPUT_r_WLAST;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_WID;
output  [C_M_AXI_OUTPUT_R_WUSER_WIDTH - 1:0] m_axi_OUTPUT_r_WUSER;
output   m_axi_OUTPUT_r_ARVALID;
input   m_axi_OUTPUT_r_ARREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_OUTPUT_r_ARADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_ARID;
output  [7:0] m_axi_OUTPUT_r_ARLEN;
output  [2:0] m_axi_OUTPUT_r_ARSIZE;
output  [1:0] m_axi_OUTPUT_r_ARBURST;
output  [1:0] m_axi_OUTPUT_r_ARLOCK;
output  [3:0] m_axi_OUTPUT_r_ARCACHE;
output  [2:0] m_axi_OUTPUT_r_ARPROT;
output  [3:0] m_axi_OUTPUT_r_ARQOS;
output  [3:0] m_axi_OUTPUT_r_ARREGION;
output  [C_M_AXI_OUTPUT_R_ARUSER_WIDTH - 1:0] m_axi_OUTPUT_r_ARUSER;
input   m_axi_OUTPUT_r_RVALID;
output   m_axi_OUTPUT_r_RREADY;
input  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_OUTPUT_r_RDATA;
input   m_axi_OUTPUT_r_RLAST;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_RID;
input  [C_M_AXI_OUTPUT_R_RUSER_WIDTH - 1:0] m_axi_OUTPUT_r_RUSER;
input  [1:0] m_axi_OUTPUT_r_RRESP;
input   m_axi_OUTPUT_r_BVALID;
output   m_axi_OUTPUT_r_BREADY;
input  [1:0] m_axi_OUTPUT_r_BRESP;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_OUTPUT_r_BID;
input  [C_M_AXI_OUTPUT_R_BUSER_WIDTH - 1:0] m_axi_OUTPUT_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] image_in;
wire   [31:0] image_out;
reg   [16:0] arr1_address0;
reg    arr1_ce0;
reg    arr1_we0;
reg   [7:0] arr1_d0;
wire   [7:0] arr1_q0;
reg   [16:0] zpadded_img4_address0;
reg    zpadded_img4_ce0;
reg    zpadded_img4_we0;
reg   [7:0] zpadded_img4_d0;
wire   [7:0] zpadded_img4_q0;
wire   [4:0] kernel1_address0;
reg    kernel1_ce0;
wire   [5:0] kernel1_q0;
reg    INPUT_r_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    INPUT_r_blk_n_R;
wire    ap_CS_fsm_state11;
reg    OUTPUT_r_blk_n_AW;
wire    ap_CS_fsm_state16;
wire   [0:0] exitcond3_fu_754_p2;
reg    OUTPUT_r_blk_n_W;
wire    ap_CS_fsm_state26;
reg    OUTPUT_r_blk_n_B;
wire    ap_CS_fsm_state30;
wire    INPUT_r_AWREADY;
wire    INPUT_r_WREADY;
reg    INPUT_r_ARVALID;
wire    INPUT_r_ARREADY;
wire   [31:0] INPUT_r_ARADDR;
wire    INPUT_r_RVALID;
reg    INPUT_r_RREADY;
wire   [31:0] INPUT_r_RDATA;
wire    INPUT_r_RLAST;
wire   [0:0] INPUT_r_RID;
wire   [0:0] INPUT_r_RUSER;
wire   [1:0] INPUT_r_RRESP;
wire    INPUT_r_BVALID;
wire   [1:0] INPUT_r_BRESP;
wire   [0:0] INPUT_r_BID;
wire   [0:0] INPUT_r_BUSER;
reg    OUTPUT_r_AWVALID;
wire    OUTPUT_r_AWREADY;
reg    OUTPUT_r_WVALID;
wire    OUTPUT_r_WREADY;
wire   [31:0] OUTPUT_r_WDATA;
wire    OUTPUT_r_ARREADY;
wire    OUTPUT_r_RVALID;
wire   [31:0] OUTPUT_r_RDATA;
wire    OUTPUT_r_RLAST;
wire   [0:0] OUTPUT_r_RID;
wire   [0:0] OUTPUT_r_RUSER;
wire   [1:0] OUTPUT_r_RRESP;
wire    OUTPUT_r_BVALID;
reg    OUTPUT_r_BREADY;
wire   [1:0] OUTPUT_r_BRESP;
wire   [0:0] OUTPUT_r_BID;
wire   [0:0] OUTPUT_r_BUSER;
reg   [31:0] OUTPUT_addr_reg_1053;
wire   [30:0] tmp_10_cast_fu_500_p1;
reg   [30:0] tmp_10_cast_reg_1059;
wire   [16:0] next_mul_fu_504_p2;
reg   [16:0] next_mul_reg_1064;
wire    ap_CS_fsm_state2;
wire   [8:0] i_1_fu_516_p2;
reg   [8:0] i_1_reg_1072;
wire   [16:0] k_2_fu_522_p2;
reg   [16:0] k_2_reg_1077;
wire   [0:0] exitcond7_fu_510_p2;
wire   [8:0] j_1_fu_534_p2;
reg   [8:0] j_1_reg_1085;
wire    ap_CS_fsm_state3;
wire   [30:0] image_in2_sum_fu_544_p2;
reg   [30:0] image_in2_sum_reg_1090;
wire   [0:0] exitcond6_fu_528_p2;
wire   [16:0] tmp_4_fu_553_p2;
reg   [16:0] tmp_4_reg_1095;
wire   [16:0] tmp_5_fu_559_p2;
reg   [16:0] tmp_5_reg_1100;
reg    ap_sig_ioackin_INPUT_r_ARREADY;
wire   [7:0] tmp_1_fu_575_p1;
reg   [7:0] tmp_1_reg_1111;
wire   [16:0] next_mul6_fu_583_p2;
reg   [16:0] next_mul6_reg_1116;
wire    ap_CS_fsm_state13;
wire   [8:0] i_2_fu_599_p2;
reg   [8:0] i_2_reg_1124;
wire  signed [17:0] grp_fu_1031_p3;
reg  signed [17:0] tmp_s_reg_1129;
wire   [0:0] exitcond5_fu_593_p2;
wire   [8:0] j_2_fu_615_p2;
reg   [8:0] j_2_reg_1137;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_16_fu_657_p2;
reg   [0:0] tmp_16_reg_1142;
wire   [0:0] exitcond4_fu_609_p2;
wire   [0:0] tmp_27_fu_699_p2;
reg   [0:0] tmp_27_reg_1146;
wire   [16:0] tmp_30_fu_729_p2;
reg   [16:0] tmp_30_reg_1155;
wire   [31:0] a_cast_fu_766_p1;
reg   [31:0] a_cast_reg_1163;
reg    ap_sig_ioackin_OUTPUT_r_AWREADY;
reg    ap_block_state16_io;
wire   [31:0] tmp_13_cast_fu_776_p1;
reg   [31:0] tmp_13_cast_reg_1168;
wire   [17:0] tmp_9_fu_784_p2;
reg   [17:0] tmp_9_reg_1173;
wire   [8:0] b_fu_796_p2;
reg   [8:0] b_reg_1181;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond2_fu_790_p2;
wire   [31:0] b_cast_fu_802_p1;
reg   [31:0] b_cast_reg_1186;
wire   [31:0] tmp_25_cast_fu_812_p1;
reg   [31:0] tmp_25_cast_reg_1191;
wire   [8:0] i_3_fu_816_p2;
wire   [31:0] m_1_fu_827_p2;
reg   [31:0] m_1_reg_1204;
wire    ap_CS_fsm_state18;
wire   [5:0] tmp_37_fu_849_p2;
reg   [5:0] tmp_37_reg_1209;
wire   [0:0] tmp_26_fu_822_p2;
wire  signed [17:0] tmp_39_fu_1039_p2;
reg  signed [17:0] tmp_39_reg_1214;
reg   [7:0] tmp_33_reg_1219;
wire   [17:0] tmp_45_fu_878_p2;
reg   [17:0] tmp_45_reg_1224;
wire   [8:0] j_4_fu_883_p2;
reg   [8:0] j_4_reg_1229;
wire   [31:0] n_1_fu_894_p2;
reg   [31:0] n_1_reg_1237;
wire    ap_CS_fsm_state19;
wire   [0:0] tmp_36_fu_889_p2;
wire   [31:0] b_1_fu_928_p2;
reg   [31:0] b_1_reg_1252;
wire   [31:0] a_1_fu_934_p2;
reg   [5:0] kernel1_load_reg_1262;
wire    ap_CS_fsm_state20;
reg   [7:0] zpadded_img4_load_reg_1267;
wire   [31:0] grp_fu_1045_p3;
wire    ap_CS_fsm_state21;
wire   [16:0] next_mul8_fu_982_p2;
reg   [16:0] next_mul8_reg_1277;
wire    ap_CS_fsm_state23;
wire   [8:0] i_4_fu_994_p2;
reg   [8:0] i_4_reg_1285;
wire   [8:0] j_3_fu_1006_p2;
reg   [8:0] j_3_reg_1293;
wire    ap_CS_fsm_state24;
wire   [0:0] exitcond_fu_1000_p2;
reg   [7:0] arr1_load_1_reg_1303;
wire    ap_CS_fsm_state25;
reg   [8:0] i_reg_256;
reg   [16:0] k_reg_267;
reg   [16:0] phi_mul_reg_279;
reg   [8:0] j_reg_291;
wire    ap_CS_fsm_state12;
reg   [16:0] k_1_reg_302;
reg   [8:0] i1_reg_312;
reg   [16:0] phi_mul5_reg_324;
reg   [8:0] j2_reg_336;
wire    ap_CS_fsm_state15;
reg   [8:0] i3_reg_347;
reg   [8:0] j4_reg_359;
wire    ap_CS_fsm_state22;
reg   [31:0] m_reg_371;
reg   [31:0] a1_reg_382;
reg   [31:0] tmp_2_reg_392;
reg   [31:0] n_reg_404;
reg   [31:0] b1_reg_415;
reg   [31:0] tmp_3_reg_424;
reg   [8:0] i5_reg_436;
reg   [16:0] phi_mul7_reg_447;
reg   [8:0] j6_reg_459;
reg    ap_sig_ioackin_OUTPUT_r_WREADY;
wire   [0:0] exitcond1_fu_988_p2;
wire   [63:0] tmp_19_cast_fu_579_p1;
wire  signed [63:0] tmp_45_cast_fu_720_p1;
wire   [63:0] tmp_24_cast_fu_745_p1;
wire   [63:0] tmp_46_cast_fu_750_p1;
wire  signed [63:0] tmp_52_cast_fu_909_p1;
wire  signed [63:0] tmp_53_cast_fu_923_p1;
wire  signed [63:0] tmp_51_cast_fu_978_p1;
wire   [63:0] tmp_47_cast_fu_1022_p1;
wire   [63:0] tmp_6_fu_480_p1;
wire   [63:0] image_in2_sum_cast_fu_565_p1;
reg    ap_reg_ioackin_INPUT_r_ARREADY;
reg    ap_reg_ioackin_OUTPUT_r_AWREADY;
reg    ap_reg_ioackin_OUTPUT_r_WREADY;
wire   [7:0] tmp_43_fu_969_p3;
wire   [29:0] image_out3_fu_470_p4;
wire   [29:0] tmp_fu_490_p4;
wire   [30:0] tmp_cast_fu_540_p1;
wire   [16:0] tmp_4_cast_fu_549_p1;
wire   [0:0] tmp_11_fu_627_p2;
wire   [0:0] tmp_10_fu_621_p2;
wire   [0:0] tmp_13_fu_639_p2;
wire   [0:0] tmp_12_fu_633_p2;
wire   [0:0] tmp_15_fu_651_p2;
wire   [0:0] tmp_14_fu_645_p2;
wire   [0:0] tmp_18_fu_669_p2;
wire   [0:0] tmp_17_fu_663_p2;
wire   [0:0] tmp_21_fu_681_p2;
wire   [0:0] tmp_19_fu_675_p2;
wire   [0:0] tmp_23_fu_693_p2;
wire   [0:0] tmp_22_fu_687_p2;
wire   [9:0] j2_cast_fu_605_p1;
wire   [9:0] tmp_20_fu_705_p2;
wire  signed [17:0] tmp_21_cast_fu_711_p1;
(* use_dsp48 = "no" *) wire   [17:0] tmp_29_fu_715_p2;
wire   [16:0] tmp_22_cast_fu_725_p1;
wire   [16:0] tmp_16_cast_fu_735_p1;
wire   [16:0] tmp_24_fu_739_p2;
wire   [8:0] a_fu_760_p2;
wire   [8:0] tmp_7_fu_770_p2;
wire   [8:0] tmp_9_fu_784_p0;
wire   [8:0] tmp_25_fu_806_p2;
wire   [3:0] tmp_35_fu_837_p1;
wire   [5:0] p_shl_cast_fu_841_p3;
wire   [5:0] tmp_32_fu_833_p1;
wire   [31:0] p_neg_fu_859_p2;
wire   [17:0] tmp_35_cast_fu_875_p1;
wire   [5:0] tmp_46_fu_900_p1;
wire   [5:0] tmp_47_fu_904_p2;
wire   [17:0] tmp_48_fu_914_p1;
(* use_dsp48 = "no" *) wire   [17:0] tmp_49_fu_918_p2;
wire   [0:0] tmp_44_fu_946_p3;
wire   [7:0] tmp_34_fu_954_p2;
wire   [7:0] tmp_42_fu_959_p4;
wire   [16:0] tmp_27_cast_fu_1012_p1;
wire   [16:0] tmp_31_fu_1016_p2;
wire   [8:0] grp_fu_1031_p0;
wire  signed [1:0] grp_fu_1031_p1;
wire   [9:0] grp_fu_1031_p2;
wire   [9:0] tmp_39_fu_1039_p0;
wire  signed [17:0] tmp_39_fu_1039_p1;
wire   [5:0] grp_fu_1045_p0;
wire   [7:0] grp_fu_1045_p1;
reg   [29:0] ap_NS_fsm;
wire   [9:0] grp_fu_1031_p00;
wire   [15:0] grp_fu_1045_p00;
wire   [15:0] grp_fu_1045_p10;
wire   [17:0] tmp_9_fu_784_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_reg_ioackin_INPUT_r_ARREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUT_r_WREADY = 1'b0;
end

imageproc_arr1 #(
    .DataWidth( 8 ),
    .AddressRange( 120000 ),
    .AddressWidth( 17 ))
arr1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(arr1_address0),
    .ce0(arr1_ce0),
    .we0(arr1_we0),
    .d0(arr1_d0),
    .q0(arr1_q0)
);

imageproc_zpaddedbkb #(
    .DataWidth( 8 ),
    .AddressRange( 122816 ),
    .AddressWidth( 17 ))
zpadded_img4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(zpadded_img4_address0),
    .ce0(zpadded_img4_ce0),
    .we0(zpadded_img4_we0),
    .d0(zpadded_img4_d0),
    .q0(zpadded_img4_q0)
);

imageproc_kernel1 #(
    .DataWidth( 6 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
kernel1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(kernel1_address0),
    .ce0(kernel1_ce0),
    .q0(kernel1_q0)
);

imageproc_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
imageproc_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .image_in(image_in),
    .image_out(image_out)
);

imageproc_INPUT_r_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_R_CACHE_VALUE ))
imageproc_INPUT_r_m_axi_U(
    .AWVALID(m_axi_INPUT_r_AWVALID),
    .AWREADY(m_axi_INPUT_r_AWREADY),
    .AWADDR(m_axi_INPUT_r_AWADDR),
    .AWID(m_axi_INPUT_r_AWID),
    .AWLEN(m_axi_INPUT_r_AWLEN),
    .AWSIZE(m_axi_INPUT_r_AWSIZE),
    .AWBURST(m_axi_INPUT_r_AWBURST),
    .AWLOCK(m_axi_INPUT_r_AWLOCK),
    .AWCACHE(m_axi_INPUT_r_AWCACHE),
    .AWPROT(m_axi_INPUT_r_AWPROT),
    .AWQOS(m_axi_INPUT_r_AWQOS),
    .AWREGION(m_axi_INPUT_r_AWREGION),
    .AWUSER(m_axi_INPUT_r_AWUSER),
    .WVALID(m_axi_INPUT_r_WVALID),
    .WREADY(m_axi_INPUT_r_WREADY),
    .WDATA(m_axi_INPUT_r_WDATA),
    .WSTRB(m_axi_INPUT_r_WSTRB),
    .WLAST(m_axi_INPUT_r_WLAST),
    .WID(m_axi_INPUT_r_WID),
    .WUSER(m_axi_INPUT_r_WUSER),
    .ARVALID(m_axi_INPUT_r_ARVALID),
    .ARREADY(m_axi_INPUT_r_ARREADY),
    .ARADDR(m_axi_INPUT_r_ARADDR),
    .ARID(m_axi_INPUT_r_ARID),
    .ARLEN(m_axi_INPUT_r_ARLEN),
    .ARSIZE(m_axi_INPUT_r_ARSIZE),
    .ARBURST(m_axi_INPUT_r_ARBURST),
    .ARLOCK(m_axi_INPUT_r_ARLOCK),
    .ARCACHE(m_axi_INPUT_r_ARCACHE),
    .ARPROT(m_axi_INPUT_r_ARPROT),
    .ARQOS(m_axi_INPUT_r_ARQOS),
    .ARREGION(m_axi_INPUT_r_ARREGION),
    .ARUSER(m_axi_INPUT_r_ARUSER),
    .RVALID(m_axi_INPUT_r_RVALID),
    .RREADY(m_axi_INPUT_r_RREADY),
    .RDATA(m_axi_INPUT_r_RDATA),
    .RLAST(m_axi_INPUT_r_RLAST),
    .RID(m_axi_INPUT_r_RID),
    .RUSER(m_axi_INPUT_r_RUSER),
    .RRESP(m_axi_INPUT_r_RRESP),
    .BVALID(m_axi_INPUT_r_BVALID),
    .BREADY(m_axi_INPUT_r_BREADY),
    .BRESP(m_axi_INPUT_r_BRESP),
    .BID(m_axi_INPUT_r_BID),
    .BUSER(m_axi_INPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_r_ARVALID),
    .I_ARREADY(INPUT_r_ARREADY),
    .I_ARADDR(INPUT_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(INPUT_r_RVALID),
    .I_RREADY(INPUT_r_RREADY),
    .I_RDATA(INPUT_r_RDATA),
    .I_RID(INPUT_r_RID),
    .I_RUSER(INPUT_r_RUSER),
    .I_RRESP(INPUT_r_RRESP),
    .I_RLAST(INPUT_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_r_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(INPUT_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_r_BRESP),
    .I_BID(INPUT_r_BID),
    .I_BUSER(INPUT_r_BUSER)
);

imageproc_OUTPUT_r_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_R_CACHE_VALUE ))
imageproc_OUTPUT_r_m_axi_U(
    .AWVALID(m_axi_OUTPUT_r_AWVALID),
    .AWREADY(m_axi_OUTPUT_r_AWREADY),
    .AWADDR(m_axi_OUTPUT_r_AWADDR),
    .AWID(m_axi_OUTPUT_r_AWID),
    .AWLEN(m_axi_OUTPUT_r_AWLEN),
    .AWSIZE(m_axi_OUTPUT_r_AWSIZE),
    .AWBURST(m_axi_OUTPUT_r_AWBURST),
    .AWLOCK(m_axi_OUTPUT_r_AWLOCK),
    .AWCACHE(m_axi_OUTPUT_r_AWCACHE),
    .AWPROT(m_axi_OUTPUT_r_AWPROT),
    .AWQOS(m_axi_OUTPUT_r_AWQOS),
    .AWREGION(m_axi_OUTPUT_r_AWREGION),
    .AWUSER(m_axi_OUTPUT_r_AWUSER),
    .WVALID(m_axi_OUTPUT_r_WVALID),
    .WREADY(m_axi_OUTPUT_r_WREADY),
    .WDATA(m_axi_OUTPUT_r_WDATA),
    .WSTRB(m_axi_OUTPUT_r_WSTRB),
    .WLAST(m_axi_OUTPUT_r_WLAST),
    .WID(m_axi_OUTPUT_r_WID),
    .WUSER(m_axi_OUTPUT_r_WUSER),
    .ARVALID(m_axi_OUTPUT_r_ARVALID),
    .ARREADY(m_axi_OUTPUT_r_ARREADY),
    .ARADDR(m_axi_OUTPUT_r_ARADDR),
    .ARID(m_axi_OUTPUT_r_ARID),
    .ARLEN(m_axi_OUTPUT_r_ARLEN),
    .ARSIZE(m_axi_OUTPUT_r_ARSIZE),
    .ARBURST(m_axi_OUTPUT_r_ARBURST),
    .ARLOCK(m_axi_OUTPUT_r_ARLOCK),
    .ARCACHE(m_axi_OUTPUT_r_ARCACHE),
    .ARPROT(m_axi_OUTPUT_r_ARPROT),
    .ARQOS(m_axi_OUTPUT_r_ARQOS),
    .ARREGION(m_axi_OUTPUT_r_ARREGION),
    .ARUSER(m_axi_OUTPUT_r_ARUSER),
    .RVALID(m_axi_OUTPUT_r_RVALID),
    .RREADY(m_axi_OUTPUT_r_RREADY),
    .RDATA(m_axi_OUTPUT_r_RDATA),
    .RLAST(m_axi_OUTPUT_r_RLAST),
    .RID(m_axi_OUTPUT_r_RID),
    .RUSER(m_axi_OUTPUT_r_RUSER),
    .RRESP(m_axi_OUTPUT_r_RRESP),
    .BVALID(m_axi_OUTPUT_r_BVALID),
    .BREADY(m_axi_OUTPUT_r_BREADY),
    .BRESP(m_axi_OUTPUT_r_BRESP),
    .BID(m_axi_OUTPUT_r_BID),
    .BUSER(m_axi_OUTPUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUT_r_RDATA),
    .I_RID(OUTPUT_r_RID),
    .I_RUSER(OUTPUT_r_RUSER),
    .I_RRESP(OUTPUT_r_RRESP),
    .I_RLAST(OUTPUT_r_RLAST),
    .I_AWVALID(OUTPUT_r_AWVALID),
    .I_AWREADY(OUTPUT_r_AWREADY),
    .I_AWADDR(OUTPUT_addr_reg_1053),
    .I_AWID(1'd0),
    .I_AWLEN(32'd120000),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUTPUT_r_WVALID),
    .I_WREADY(OUTPUT_r_WREADY),
    .I_WDATA(OUTPUT_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(OUTPUT_r_BVALID),
    .I_BREADY(OUTPUT_r_BREADY),
    .I_BRESP(OUTPUT_r_BRESP),
    .I_BID(OUTPUT_r_BID),
    .I_BUSER(OUTPUT_r_BUSER)
);

imageproc_am_addmcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 2 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 18 ))
imageproc_am_addmcud_U1(
    .din0(grp_fu_1031_p0),
    .din1(grp_fu_1031_p1),
    .din2(grp_fu_1031_p2),
    .dout(grp_fu_1031_p3)
);

imageproc_mul_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
imageproc_mul_muldEe_U2(
    .din0(tmp_39_fu_1039_p0),
    .din1(tmp_39_fu_1039_p1),
    .dout(tmp_39_fu_1039_p2)
);

imageproc_mac_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imageproc_mac_muleOg_U3(
    .din0(grp_fu_1045_p0),
    .din1(grp_fu_1045_p1),
    .din2(tmp_3_reg_424),
    .dout(grp_fu_1045_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_INPUT_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_INPUT_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_INPUT_r_ARREADY <= 1'b0;
            end else if ((1'b1 == INPUT_r_ARREADY)) begin
                ap_reg_ioackin_INPUT_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b0;
    end else begin
        if (((exitcond3_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
            if ((1'b0 == ap_block_state16_io)) begin
                ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b0;
            end else if ((1'b1 == OUTPUT_r_AWREADY)) begin
                ap_reg_ioackin_OUTPUT_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            if ((ap_sig_ioackin_OUTPUT_r_WREADY == 1'b1)) begin
                ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b0;
            end else if ((1'b1 == OUTPUT_r_WREADY)) begin
                ap_reg_ioackin_OUTPUT_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_36_fu_889_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        a1_reg_382 <= a_1_fu_934_p2;
    end else if (((exitcond2_fu_790_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        a1_reg_382 <= a_cast_reg_1163;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        b1_reg_415 <= b_1_reg_1252;
    end else if (((tmp_26_fu_822_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        b1_reg_415 <= b_cast_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_312 <= 9'd0;
    end else if (((exitcond4_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        i1_reg_312 <= i_2_reg_1124;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        i3_reg_347 <= 9'd2;
    end else if (((exitcond2_fu_790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i3_reg_347 <= i_3_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1000_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        i5_reg_436 <= i_4_reg_1285;
    end else if (((1'b0 == ap_block_state16_io) & (exitcond3_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i5_reg_436 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_256 <= i_1_reg_1072;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_256 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        j2_reg_336 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j2_reg_336 <= j_2_reg_1137;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state16_io) & (exitcond3_fu_754_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        j4_reg_359 <= 9'd2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        j4_reg_359 <= j_4_reg_1229;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_988_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        j6_reg_459 <= 9'd0;
    end else if (((ap_sig_ioackin_OUTPUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        j6_reg_459 <= j_3_reg_1293;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_291 <= j_1_reg_1085;
    end else if (((exitcond7_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_291 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_1_reg_302 <= tmp_5_reg_1100;
    end else if (((exitcond7_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_1_reg_302 <= k_reg_267;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_267 <= k_2_reg_1077;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_267 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_36_fu_889_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        m_reg_371 <= m_1_reg_1204;
    end else if (((exitcond2_fu_790_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        m_reg_371 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        n_reg_404 <= n_1_reg_1237;
    end else if (((tmp_26_fu_822_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        n_reg_404 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul5_reg_324 <= 17'd0;
    end else if (((exitcond4_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        phi_mul5_reg_324 <= next_mul6_reg_1116;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1000_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        phi_mul7_reg_447 <= next_mul8_reg_1277;
    end else if (((1'b0 == ap_block_state16_io) & (exitcond3_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        phi_mul7_reg_447 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_279 <= next_mul_reg_1064;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_279 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_36_fu_889_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        tmp_2_reg_392 <= tmp_3_reg_424;
    end else if (((exitcond2_fu_790_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_2_reg_392 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_3_reg_424 <= grp_fu_1045_p3;
    end else if (((tmp_26_fu_822_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        tmp_3_reg_424 <= tmp_2_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        OUTPUT_addr_reg_1053[29 : 0] <= tmp_6_fu_480_p1[29 : 0];
        tmp_10_cast_reg_1059[29 : 0] <= tmp_10_cast_fu_500_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state16_io) & (exitcond3_fu_754_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        a_cast_reg_1163[8 : 0] <= a_cast_fu_766_p1[8 : 0];
        tmp_13_cast_reg_1168[8 : 0] <= tmp_13_cast_fu_776_p1[8 : 0];
        tmp_9_reg_1173[17 : 2] <= tmp_9_fu_784_p2[17 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        arr1_load_1_reg_1303 <= arr1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_36_fu_889_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        b_1_reg_1252 <= b_1_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_790_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        b_cast_reg_1186[8 : 0] <= b_cast_fu_802_p1[8 : 0];
        b_reg_1181 <= b_fu_796_p2;
        tmp_25_cast_reg_1191[8 : 0] <= tmp_25_cast_fu_812_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_1072 <= i_1_fu_516_p2;
        next_mul_reg_1064 <= next_mul_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_2_reg_1124 <= i_2_fu_599_p2;
        next_mul6_reg_1116 <= next_mul6_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_4_reg_1285 <= i_4_fu_994_p2;
        next_mul8_reg_1277 <= next_mul8_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_528_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        image_in2_sum_reg_1090 <= image_in2_sum_fu_544_p2;
        tmp_4_reg_1095 <= tmp_4_fu_553_p2;
        tmp_5_reg_1100 <= tmp_5_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_1085 <= j_1_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_2_reg_1137 <= j_2_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_3_reg_1293 <= j_3_fu_1006_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_26_fu_822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        j_4_reg_1229 <= j_4_fu_883_p2;
        tmp_33_reg_1219 <= {{p_neg_fu_859_p2[15:8]}};
        tmp_45_reg_1224 <= tmp_45_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_2_reg_1077 <= k_2_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        kernel1_load_reg_1262 <= kernel1_q0;
        zpadded_img4_load_reg_1267 <= zpadded_img4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        m_1_reg_1204 <= m_1_fu_827_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        n_1_reg_1237 <= n_1_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_609_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_16_reg_1142 <= tmp_16_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == INPUT_r_RVALID) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_1_reg_1111 <= tmp_1_fu_575_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_609_p2 == 1'd0) & (tmp_16_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_27_reg_1146 <= tmp_27_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_699_p2 == 1'd0) & (exitcond4_fu_609_p2 == 1'd0) & (tmp_16_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_30_reg_1155 <= tmp_30_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_26_fu_822_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        tmp_37_reg_1209 <= tmp_37_fu_849_p2;
        tmp_39_reg_1214 <= tmp_39_fu_1039_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_s_reg_1129 <= grp_fu_1031_p3;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_INPUT_r_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        INPUT_r_ARVALID = 1'b1;
    end else begin
        INPUT_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == INPUT_r_RVALID) & (1'b1 == ap_CS_fsm_state11))) begin
        INPUT_r_RREADY = 1'b1;
    end else begin
        INPUT_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        INPUT_r_blk_n_AR = m_axi_INPUT_r_ARREADY;
    end else begin
        INPUT_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        INPUT_r_blk_n_R = m_axi_INPUT_r_RVALID;
    end else begin
        INPUT_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_OUTPUT_r_AWREADY == 1'b0) & (exitcond3_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        OUTPUT_r_AWVALID = 1'b1;
    end else begin
        OUTPUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        OUTPUT_r_BREADY = 1'b1;
    end else begin
        OUTPUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_OUTPUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26))) begin
        OUTPUT_r_WVALID = 1'b1;
    end else begin
        OUTPUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        OUTPUT_r_blk_n_AW = m_axi_OUTPUT_r_AWREADY;
    end else begin
        OUTPUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        OUTPUT_r_blk_n_B = m_axi_OUTPUT_r_BVALID;
    end else begin
        OUTPUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        OUTPUT_r_blk_n_W = m_axi_OUTPUT_r_WREADY;
    end else begin
        OUTPUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_INPUT_r_ARREADY == 1'b0)) begin
        ap_sig_ioackin_INPUT_r_ARREADY = INPUT_r_ARREADY;
    end else begin
        ap_sig_ioackin_INPUT_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUTPUT_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_OUTPUT_r_AWREADY = OUTPUT_r_AWREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUTPUT_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_OUTPUT_r_WREADY = OUTPUT_r_WREADY;
    end else begin
        ap_sig_ioackin_OUTPUT_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        arr1_address0 = tmp_47_cast_fu_1022_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        arr1_address0 = tmp_51_cast_fu_978_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        arr1_address0 = tmp_45_cast_fu_720_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        arr1_address0 = tmp_19_cast_fu_579_p1;
    end else begin
        arr1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state14))) begin
        arr1_ce0 = 1'b1;
    end else begin
        arr1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        arr1_d0 = tmp_43_fu_969_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        arr1_d0 = tmp_1_reg_1111;
    end else begin
        arr1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12))) begin
        arr1_we0 = 1'b1;
    end else begin
        arr1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        kernel1_ce0 = 1'b1;
    end else begin
        kernel1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        zpadded_img4_address0 = tmp_53_cast_fu_923_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        zpadded_img4_address0 = tmp_46_cast_fu_750_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        zpadded_img4_address0 = tmp_24_cast_fu_745_p1;
    end else begin
        zpadded_img4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        zpadded_img4_ce0 = 1'b1;
    end else begin
        zpadded_img4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        zpadded_img4_d0 = arr1_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        zpadded_img4_d0 = 8'd0;
    end else begin
        zpadded_img4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_27_reg_1146 == 1'd0) & (tmp_16_reg_1142 == 1'd0) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_CS_fsm_state14) & (((exitcond4_fu_609_p2 == 1'd0) & (tmp_27_fu_699_p2 == 1'd1)) | ((exitcond4_fu_609_p2 == 1'd0) & (tmp_16_fu_657_p2 == 1'd1)))))) begin
        zpadded_img4_we0 = 1'b1;
    end else begin
        zpadded_img4_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond7_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond6_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_INPUT_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == INPUT_r_RVALID) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond5_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond4_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_io) & (exitcond3_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b0 == ap_block_state16_io) & (exitcond3_fu_754_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((exitcond2_fu_790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((tmp_26_fu_822_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((tmp_36_fu_889_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state23 : begin
            if (((exitcond1_fu_988_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((exitcond_fu_1000_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((ap_sig_ioackin_OUTPUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == OUTPUT_r_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_r_ARADDR = image_in2_sum_cast_fu_565_p1;

assign OUTPUT_r_WDATA = arr1_load_1_reg_1303;

assign a_1_fu_934_p2 = (a1_reg_382 + 32'd1);

assign a_cast_fu_766_p1 = a_fu_760_p2;

assign a_fu_760_p2 = ($signed(i3_reg_347) + $signed(9'd510));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state16_io = ((ap_sig_ioackin_OUTPUT_r_AWREADY == 1'b0) & (exitcond3_fu_754_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_1_fu_928_p2 = (32'd1 + b1_reg_415);

assign b_cast_fu_802_p1 = b_fu_796_p2;

assign b_fu_796_p2 = ($signed(j4_reg_359) + $signed(9'd510));

assign exitcond1_fu_988_p2 = ((i5_reg_436 == 9'd400) ? 1'b1 : 1'b0);

assign exitcond2_fu_790_p2 = ((j4_reg_359 == 9'd302) ? 1'b1 : 1'b0);

assign exitcond3_fu_754_p2 = ((i3_reg_347 == 9'd402) ? 1'b1 : 1'b0);

assign exitcond4_fu_609_p2 = ((j2_reg_336 == 9'd304) ? 1'b1 : 1'b0);

assign exitcond5_fu_593_p2 = ((i1_reg_312 == 9'd404) ? 1'b1 : 1'b0);

assign exitcond6_fu_528_p2 = ((j_reg_291 == 9'd300) ? 1'b1 : 1'b0);

assign exitcond7_fu_510_p2 = ((i_reg_256 == 9'd400) ? 1'b1 : 1'b0);

assign exitcond_fu_1000_p2 = ((j6_reg_459 == 9'd300) ? 1'b1 : 1'b0);

assign grp_fu_1031_p0 = grp_fu_1031_p00;

assign grp_fu_1031_p00 = i1_reg_312;

assign grp_fu_1031_p1 = 10'd1022;

assign grp_fu_1031_p2 = 18'd300;

assign grp_fu_1045_p0 = grp_fu_1045_p00;

assign grp_fu_1045_p00 = kernel1_load_reg_1262;

assign grp_fu_1045_p1 = grp_fu_1045_p10;

assign grp_fu_1045_p10 = zpadded_img4_load_reg_1267;

assign i_1_fu_516_p2 = (i_reg_256 + 9'd1);

assign i_2_fu_599_p2 = (i1_reg_312 + 9'd1);

assign i_3_fu_816_p2 = (i3_reg_347 + 9'd1);

assign i_4_fu_994_p2 = (i5_reg_436 + 9'd1);

assign image_in2_sum_cast_fu_565_p1 = image_in2_sum_reg_1090;

assign image_in2_sum_fu_544_p2 = (tmp_10_cast_reg_1059 + tmp_cast_fu_540_p1);

assign image_out3_fu_470_p4 = {{image_out[31:2]}};

assign j2_cast_fu_605_p1 = j2_reg_336;

assign j_1_fu_534_p2 = (j_reg_291 + 9'd1);

assign j_2_fu_615_p2 = (j2_reg_336 + 9'd1);

assign j_3_fu_1006_p2 = (j6_reg_459 + 9'd1);

assign j_4_fu_883_p2 = (j4_reg_359 + 9'd1);

assign k_2_fu_522_p2 = (k_reg_267 + 17'd300);

assign kernel1_address0 = tmp_52_cast_fu_909_p1;

assign m_1_fu_827_p2 = (m_reg_371 + 32'd1);

assign n_1_fu_894_p2 = (n_reg_404 + 32'd1);

assign next_mul6_fu_583_p2 = (phi_mul5_reg_324 + 17'd304);

assign next_mul8_fu_982_p2 = (phi_mul7_reg_447 + 17'd300);

assign next_mul_fu_504_p2 = (phi_mul_reg_279 + 17'd300);

assign p_neg_fu_859_p2 = (32'd0 - tmp_2_reg_392);

assign p_shl_cast_fu_841_p3 = {{tmp_35_fu_837_p1}, {2'd0}};

assign tmp_10_cast_fu_500_p1 = tmp_fu_490_p4;

assign tmp_10_fu_621_p2 = ((i1_reg_312 == 9'd403) ? 1'b1 : 1'b0);

assign tmp_11_fu_627_p2 = ((i1_reg_312 == 9'd402) ? 1'b1 : 1'b0);

assign tmp_12_fu_633_p2 = (tmp_11_fu_627_p2 | tmp_10_fu_621_p2);

assign tmp_13_cast_fu_776_p1 = tmp_7_fu_770_p2;

assign tmp_13_fu_639_p2 = ((i1_reg_312 == 9'd1) ? 1'b1 : 1'b0);

assign tmp_14_fu_645_p2 = (tmp_13_fu_639_p2 | tmp_12_fu_633_p2);

assign tmp_15_fu_651_p2 = ((i1_reg_312 == 9'd0) ? 1'b1 : 1'b0);

assign tmp_16_cast_fu_735_p1 = j2_reg_336;

assign tmp_16_fu_657_p2 = (tmp_15_fu_651_p2 | tmp_14_fu_645_p2);

assign tmp_17_fu_663_p2 = ((j2_reg_336 == 9'd303) ? 1'b1 : 1'b0);

assign tmp_18_fu_669_p2 = ((j2_reg_336 == 9'd302) ? 1'b1 : 1'b0);

assign tmp_19_cast_fu_579_p1 = tmp_4_reg_1095;

assign tmp_19_fu_675_p2 = (tmp_18_fu_669_p2 | tmp_17_fu_663_p2);

assign tmp_1_fu_575_p1 = INPUT_r_RDATA[7:0];

assign tmp_20_fu_705_p2 = ($signed(j2_cast_fu_605_p1) + $signed(10'd1022));

assign tmp_21_cast_fu_711_p1 = $signed(tmp_20_fu_705_p2);

assign tmp_21_fu_681_p2 = ((j2_reg_336 == 9'd1) ? 1'b1 : 1'b0);

assign tmp_22_cast_fu_725_p1 = j2_reg_336;

assign tmp_22_fu_687_p2 = (tmp_21_fu_681_p2 | tmp_19_fu_675_p2);

assign tmp_23_fu_693_p2 = ((j2_reg_336 == 9'd0) ? 1'b1 : 1'b0);

assign tmp_24_cast_fu_745_p1 = tmp_24_fu_739_p2;

assign tmp_24_fu_739_p2 = (phi_mul5_reg_324 + tmp_16_cast_fu_735_p1);

assign tmp_25_cast_fu_812_p1 = tmp_25_fu_806_p2;

assign tmp_25_fu_806_p2 = (j4_reg_359 + 9'd3);

assign tmp_26_fu_822_p2 = (($signed(a1_reg_382) < $signed(tmp_13_cast_reg_1168)) ? 1'b1 : 1'b0);

assign tmp_27_cast_fu_1012_p1 = j6_reg_459;

assign tmp_27_fu_699_p2 = (tmp_23_fu_693_p2 | tmp_22_fu_687_p2);

assign tmp_29_fu_715_p2 = ($signed(tmp_s_reg_1129) + $signed(tmp_21_cast_fu_711_p1));

assign tmp_30_fu_729_p2 = (phi_mul5_reg_324 + tmp_22_cast_fu_725_p1);

assign tmp_31_fu_1016_p2 = (phi_mul7_reg_447 + tmp_27_cast_fu_1012_p1);

assign tmp_32_fu_833_p1 = m_reg_371[5:0];

assign tmp_34_fu_954_p2 = (8'd0 - tmp_33_reg_1219);

assign tmp_35_cast_fu_875_p1 = b_reg_1181;

assign tmp_35_fu_837_p1 = m_reg_371[3:0];

assign tmp_36_fu_889_p2 = (($signed(b1_reg_415) < $signed(tmp_25_cast_reg_1191)) ? 1'b1 : 1'b0);

assign tmp_37_fu_849_p2 = (p_shl_cast_fu_841_p3 + tmp_32_fu_833_p1);

assign tmp_39_fu_1039_p0 = 18'd304;

assign tmp_39_fu_1039_p1 = a1_reg_382[17:0];

assign tmp_42_fu_959_p4 = {{tmp_2_reg_392[15:8]}};

assign tmp_43_fu_969_p3 = ((tmp_44_fu_946_p3[0:0] === 1'b1) ? tmp_34_fu_954_p2 : tmp_42_fu_959_p4);

assign tmp_44_fu_946_p3 = tmp_2_reg_392[32'd31];

assign tmp_45_cast_fu_720_p1 = $signed(tmp_29_fu_715_p2);

assign tmp_45_fu_878_p2 = (tmp_9_reg_1173 + tmp_35_cast_fu_875_p1);

assign tmp_46_cast_fu_750_p1 = tmp_30_reg_1155;

assign tmp_46_fu_900_p1 = n_reg_404[5:0];

assign tmp_47_cast_fu_1022_p1 = tmp_31_fu_1016_p2;

assign tmp_47_fu_904_p2 = (tmp_46_fu_900_p1 + tmp_37_reg_1209);

assign tmp_48_fu_914_p1 = b1_reg_415[17:0];

assign tmp_49_fu_918_p2 = ($signed(tmp_48_fu_914_p1) + $signed(tmp_39_reg_1214));

assign tmp_4_cast_fu_549_p1 = j_reg_291;

assign tmp_4_fu_553_p2 = (phi_mul_reg_279 + tmp_4_cast_fu_549_p1);

assign tmp_51_cast_fu_978_p1 = $signed(tmp_45_reg_1224);

assign tmp_52_cast_fu_909_p1 = $signed(tmp_47_fu_904_p2);

assign tmp_53_cast_fu_923_p1 = $signed(tmp_49_fu_918_p2);

assign tmp_5_fu_559_p2 = (17'd1 + k_1_reg_302);

assign tmp_6_fu_480_p1 = image_out3_fu_470_p4;

assign tmp_7_fu_770_p2 = (i3_reg_347 + 9'd3);

assign tmp_9_fu_784_p0 = tmp_9_fu_784_p00;

assign tmp_9_fu_784_p00 = a_fu_760_p2;

assign tmp_9_fu_784_p2 = (tmp_9_fu_784_p0 * $signed('h12C));

assign tmp_cast_fu_540_p1 = k_1_reg_302;

assign tmp_fu_490_p4 = {{image_in[31:2]}};

always @ (posedge ap_clk) begin
    OUTPUT_addr_reg_1053[31:30] <= 2'b00;
    tmp_10_cast_reg_1059[30] <= 1'b0;
    a_cast_reg_1163[31:9] <= 23'b00000000000000000000000;
    tmp_13_cast_reg_1168[31:9] <= 23'b00000000000000000000000;
    tmp_9_reg_1173[1:0] <= 2'b00;
    b_cast_reg_1186[31:9] <= 23'b00000000000000000000000;
    tmp_25_cast_reg_1191[31:9] <= 23'b00000000000000000000000;
end

endmodule //imageproc
